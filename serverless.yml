org: hedachi
app: million-rpgs2
service: million-rpgs2
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  environment:
    ANTHROPIC_API_KEY: ${env:ANTHROPIC_API_KEY}
    STAGE: ${self:provider.stage}
    S3_BUCKET_NAME: kudamon-island
  timeout: 180
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:dynamodb:ap-northeast-1:831431380716:table/RPG_GameDetails-${self:provider.stage}
            - arn:aws:dynamodb:ap-northeast-1:831431380716:table/RPG_Games-${self:provider.stage}
            - arn:aws:dynamodb:ap-northeast-1:831431380716:table/RPG_GamePlayLogs-${self:provider.stage}
            - arn:aws:s3:::kudamon-island-${self:provider.stage}/*
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::million-rpg/*

functions:
  init_game:
    handler: src/api/init_game.handler
    events:
      - http:
          path: init_game
          method: get
          cors: true
  get_game:
    handler: src/api/get_game.handler
    events:
      - http:
          path: get_game
          method: get
          cors: true
  get_scenario:
    handler: src/api/get_scenario.handler
    events:
      - http:
          path: get_scenario
          method: get
          cors: true
  get_game_list:
    handler: src/api/get_game_list.handler
    events:
      - http:
          path: get_game_list
          method: get
          cors: true
  start_game:
    handler: src/api/start_game.handler
    events:
      - http:
          path: start_game
          method: post
          cors: true
  play_game:
    handler: src/api/play_game.handler
    events:
      - http:
          path: play_game
          method: get
          cors: true
  end_game:
    handler: src/api/end_game.handler
    events:
      - http:
          path: end_game
          method: get
          cors: true
  debug_get_next_or_prev_game:
    handler: src/api/debug_get_next_or_prev_game.handler
    events:
      - http:
          path: debug_get_next_or_prev_game
          method: get
          cors: true
  get_s3_signing_url:
    handler: src/api/get_s3_signing_url.handler
    events:
      - http:
          path: get_s3_signing_url
          method: get
          cors: true

resources:
  Resources:
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RPG_Games-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: N
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    GameDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RPG_GameDetails-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: N
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    GamePlayTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: RPG_GamePlayLogs-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: gamePlayLogId
            AttributeType: N
        KeySchema:
          - AttributeName: gamePlayLogId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: kudamon-island-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'  # 必要に応じて適切なドメインに変更
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedHeaders:
                - '*'

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::kudamon-island-${self:provider.stage}/logs/*'  # 共有したいフォルダを指定

package:
  individually: true

plugins:
  - serverless-offline
  # - serverless-dynamodb
  # - serverless-domain-manager

# custom:
#   customDomain:
#     domainName: "api.rpg.vivle.jp"
#     basePath: ""  # APIのベースパス; 必要なければ空にしておく
#     stage: ${self:provider.stage}
#     createRoute53Record: true
